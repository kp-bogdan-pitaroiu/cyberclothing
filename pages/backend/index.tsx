import Head from 'next/head';
import React, { useEffect, useState } from 'react';
import Cookies from 'js-cookie';
import Dashboard from '@/components/Dashboard';
import BasicTable from '@/components/table';
import styles from '@/styles/Backend.module.css';
import CryptoJS from 'crypto-js';

interface Vendor {
  email: string;
  password: string;
}

function decryptFunction(encryptedData: string): any {
  return CryptoJS.AES.decrypt(encryptedData, "key").toString(CryptoJS.enc.Utf8);
}

export default function Backend(): JSX.Element {
  const [vendorsData, setVendorsData] = useState<Vendor[]>([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    fetch('../../vendors.json')
      .then((response) => response.json())
      .then((data) => {
        setVendorsData(vendorsData);
        setIsLoading(false);
        const encryptedData = Cookies.get('userData');
        if (encryptedData) {
          try {
            const decryptedData = decryptFunction(encryptedData);
            const user = JSON.parse(decryptedData) as Vendor;
            const matchedVendor = data.find(
              (vendor: any) => vendor.email === user.email && vendor.password === user.password
            );

            if (matchedVendor) {
              console.log('User is authenticated.');
            } else {
              console.log('Invalid user or session expired. Redirecting to login page...');
              Cookies.remove('userData');
              window.location.href = '/backend/login';
            }
          } catch (error) {
            console.error('Error parsing decrypted data:', error);
            Cookies.remove('userData');
            window.location.href = '/backend/login';
          }
        } else {
          console.log('No cookie found. Redirecting to login page...');
          window.location.href = '/backend/login';
        }
      })
      .catch((error) => {
        console.error('Error fetching vendors:', error);
        setIsLoading(false);
      });
  }, []);

  if (isLoading) {
    return <div>Loading...</div>
  }

  return (
    <>
      <Head>
        <title>Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <div className={styles.main}>
        <Dashboard />
        <BasicTable />
      </div>
    </>
  );
}